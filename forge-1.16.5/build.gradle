buildscript
{
    repositories
    {
        maven
        {
            url = 'https://maven.minecraftforge.net'
        }
        mavenCentral()
    }

    dependencies
    {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// File metadata
version = '0.1'
group = 'org.imesense.emptymod.modid'
archivesBaseName = 'emptymod'

// Java version
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft
{
    // Mappings settings of Minecraft
    mappings channel: 'official', version: '1.16.5'

    // Uncomment this to disable `Srg` named sources JAR by default
    //makeObfSourceJar = false

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations
    runs
    {
        client
        {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods
            {
                emptymod
                {
                    source sourceSets.main
                }
            }
        }

        server
        {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods
            {
                emptymod
                {
                    source sourceSets.main
                }
            }
        }

        data
        {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources
            args '--mod', 'emptymod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods
            {
                emptymod
                {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators
sourceSets.main.resources
{
    srcDir 'src/generated/resources'
}

dependencies
{
    // Specify the version of Minecraft to use
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.42'

    // Optional dependencies that exist at compile-time but might not at runtime
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // Dependencies to get remapped to current MCP mappings
    //deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
}

// Get properties into the manifest for reading by the runtime
jar
{
    manifest
    {
        attributes([
            "Specification-Title": "emptymod",
            "Specification-Vendor": "imesense",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"emptymod",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Preferred method to reobfuscate JAR file
jar.finalizedBy('reobfJar')

// Delay the obfuscation
//publish.dependsOn('reobfJar')

publishing
{
    publications
    {
        mavenJava(MavenPublication)
        {
            artifact jar
        }
    }

    repositories
    {
        maven
        {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
